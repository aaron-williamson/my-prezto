#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto. | ~63ms
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# My settings | ~2ms

# Enable reverse and forward search
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^F" history-incremental-pattern-search-forward

# Allow various deletions after vi-mode
bindkey "^?" backward-delete-char
bindkey "^H" backward-delete-char
bindkey "^W" backward-kill-word
bindkey "^U" backward-kill-line

# <C-p> and <C-n> for previous and next in command history
bindkey "^P" up-history
bindkey "^N" down-history

# Extra vi mode bindings
bindkey -M vicmd "gu" vi-down-case
bindkey -M vicmd "gU" vi-up-case
bindkey -M visual "u" vi-down-case
bindkey -M visual "U" vi-up-case
bindkey -M visual "y" vi-yank
bindkey -M visual "p" put-replace-selection

# 10ms for key sequences - makes everything more responsive
KEYTIMEOUT=1

# Launch neovim/vim more easily
if (( $+commands[nvim] )); then
  alias vim="nvim"
  alias vi="nvim"
else
  alias vi="vim"
fi

# System specific aliases
if [[ "$OSTYPE" == darwin* ]]; then
  alias la="ls -alhGF"
  alias ls="ls -lhFG"

  # File specific aliases
  if [[ -f "$HOME/.ssh/id_rsa.pub" ]]; then
    alias cpypub="cat $HOME/.ssh/id_rsa.pub | pbcopy"
  fi

  # Brew aliases
  if (( $+commands[brew] )); then
    alias brewld="brew_list_deps"
    alias brewlu="brew_list_uses"
    alias brewc='brew cleanup -s'
    alias brewu='brew upgrade'
    alias cask='brew cask'
  fi
elif [[ "$OSTYPE" == linux* ]]; then
  alias ls="ls -lhF --color=auto"
  alias la="ls -alhF --color=auto"
fi

# Get back to git root directory easily
function git_root {
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    cd "$(git rev-parse --show-toplevel)"
  else
    >&2 echo "Error, not inside a git repository"
    false
  fi
}

# List installed brew formulae and their dependencies
function brew_list_deps {
  local formulae=$(brew list)

  # Split the list of formulae by newline
  for formula in ${(f)formulae}; do
    echo -n "$FG[blue] $formula $FG[white]"
    local formula_deps=$(brew deps "$formula")

    # Split the formulae deps on newline then join them with spaces
    echo "${(fj: :)formula_deps}"
  done
}

# List brew formulae and what uses them
function brew_list_uses {
  local formulae=$(brew list)

  # Split the list of formulae by newline
  for formula in ${(f)formulae}; do
    echo -n "$FG[blue] $formula $FG[white]"
    local formulae_uses=$(brew uses "$formula" --installed)

    # Split the formulae uses on newline then join them with spaces
    echo "${(fj: :)formulae_uses}"
  done
}

# Check an app using codesign
function check_app {
  local app="$@"

  codesign --verify --verbose "$app"
  codesign --display --verbose=3 "$app"
}

# General aliases
alias vimkh="vim $HOME/.ssh/known_hosts"
alias vimt="vim -p"
alias vimv="vim -O"
alias vims="vim -o"
alias vikh="vimkh"
alias quit="exit"
alias df="df -h"
alias cdgr="git_root"
alias psa='ps -Ao "pid ppid state %cpu %mem rss start etime command"'
alias gdiff="git diff --no-index"
alias agp="ag --pager $PAGER"
alias rg="rg --smart-case"
alias rgp="ripgrep_pager"

# Alias for sudoedit where not available
if (( $+commands[sudo] )) && ! (( $+commands[sudoedit] )); then
  alias sudoedit='sudo -e'
fi

# For piping rg to a pager
function ripgrep_pager {
  rg --pretty $@ | $PAGER
}

# Automatically ls after every cd
function chpwd {
  ls
}

# Function for gitignore.io
function gi {
  curl -L -s "https://www.gitignore.io/api/$@"
}

# Machine specific rc settings
if [[ -f "$HOME/.$HOST" ]]; then
  source "$HOME/.$HOST"
fi

# fzf setup | ~6ms
if (( $+commands[fzf] )); then
  # Auto-completion if interactive shell
  [[ $- == *i* ]] && source "${FZF_PREFIX}/completion.zsh" 2> /dev/null

  # Key bindings
  source "${FZF_PREFIX}/key-bindings.zsh"

  # Ctrl-Y for change directory
  bindkey '^Y' fzf-cd-widget

  # Use ripgrep or the silver searcher to list files if available
  if (( $+commands[rg] )); then
    export FZF_DEFAULT_COMMAND='rg --files --hidden --glob !".git/"'
  elif (( $+commands[ag] )); then
    export FZF_DEFAULT_COMMAND='ag --hidden -g ""'
  fi
fi
