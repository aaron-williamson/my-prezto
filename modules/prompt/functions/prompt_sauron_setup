# vim: ft=zsh
# A simple theme that displays relevant, contextual information.
# Based on sorin prompt
#
# Non ascii characters used in this prompt provided all together for testing:
# Left prompt:
# ‚ùØ‚ùØ‚ùØ
# ‚ùÆ‚ùÆ‚ùÆ
# Right prompt (git status):
# ‚ñ≤ ‚ñº ‚òÖ ‚úö ‚úñ ‚óè ‚ñ∂ ‚â† ‚ñ†
#
# Terminal color reference with extra colors added by base16-shell:
# -- ---------------
#  0 Black (Background)
#  1 Red
#  2 Green
#  3 Yellow
#  4 Blue
#  5 Magenta
#  6 Cyan
#  7 White (Foreground)
#  8 Bright Black
#  9 Bright Red
# 10 Bright Green
# 11 Bright Yellow
# 12 Bright Blue
# 13 Bright Magenta
# 14 Bright Cyan
# 15 Bright White
# 16 Base 09 (Extra colors provided by base16-shell)
# 17 Base 0F
# 18 Base 01
# 19 Base 02
# 20 Base 04
# 21 Base 06

# Load dependencies.
pmodload 'helper'

function prompt_sauron_async_callback {
  # $1 = job name
  # $2 = job return code
  # $3 = job stdout
  # $4 = job exeuction time
  # $5 = job stderr
  local job="$1" code="$2" output="$3"

  case "$job" in
    prompt_sauron_async_git)
      # Exit early if the job was not successful
      if [[ "$code" -ne 0 ]]; then
        return
      fi

      # Split on ':' since it isn't allowed in ref names
      IFS=':' read _git_target _git_post_target <<<"$output"

      # Only grab the first of 3 space-separated possibilities
      # The (@) flag splits the arguments and quotes them
      # The (z) flag splits on words
      _git_target="$(coalesce "${(@)${(z)_git_target}}")"

      if [[ -z "$_git_target" ]]; then
        # No git target detected, clear the git portion of the prompt
        if [[ -n "$_prompt_sauron_git" ]]; then
          _prompt_sauron_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git portion of the prompt
        _prompt_sauron_git="${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
    prompt_sauron_async_touchbar)
      touchbar_status="$touchbar_status üéã $output"
      it2setkeylabel set status "$touchbar_status"
      ;;
    "[async]")
      # Code is 1 for corrupted worker output and 2 for dead worker.
      if [[ "$code" -eq 2 ]]; then
        # The worker died unexpectedly
        typeset -g prompt_sauron_async_init=0
      fi
      ;;
  esac
}

function prompt_sauron_async_git {
  # CD to passed pwd, use -q so we don't activate the chpwd hooks
  builtin cd -q "$1"

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
    print "${git_info[status]}"
  fi
}

function prompt_sauron_async_touchbar {
  # CD to passed pwd, use -q so we don't activate the chpwd hooks
  builtin cd -q "$1"

  # Set the branch
  branch="$(git rev-parse --abbrev-ref HEAD)"

  # Return a failure if the branch is empty
  if [[ -z "$branch" ]]; then
    return 1
  fi

  print "$branch"
}

function prompt_sauron_async_tasks {
  # If async init hasn't already run
  (( !${prompt_sauron_async_init:-0} )) && {
    # Create "prompt_sauron" worker
    # -u jobs are unique
    # -n notify
    async_start_worker "prompt_sauron" -u -n

    async_register_callback "prompt_sauron" prompt_sauron_async_callback

    # We've completed async setup
    # typeset -g for global variable
    typeset -g prompt_sauron_async_init=1
  }

  # Flush any currently running async jobs
  async_flush_jobs "prompt_sauron"

  # Let the async worker compute slow commands
  async_job "prompt_sauron" prompt_sauron_async_git "$PWD"

  # Lastly, perform some actions but only if we have a touchbar
  if (( $+commands[it2setkeylabel] )); then
    # Set the status to initially be our pwd
    touchbar_status="üóÇ ${_prompt_sauron_pwd}"
    it2setkeylabel set status "$touchbar_status"

    # Start an async job that handles other touchbar configuration
    async_job "prompt_sauron" prompt_sauron_async_touchbar "$PWD"
  fi
}

function prompt_sauron_precmd {
  setopt local_options
  unsetopt xtrace ksh_arrays

  # Format PWD.
  _prompt_sauron_pwd="$(prompt-pwd)"

  # Handle updating git data, as per Sorin prompt. Clear the git prompt data
  # if we're in a different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2>/dev/null)"
    if [[ "$new_git_root" != "$_sauron_cur_git_root" ]]; then
      _prompt_sauron_git=''
      _sauron_cur_git_root="$new_git_root"
    fi
  fi

  # Get python info, should be fast enough to not need async
  if (( $+functions[python-info] )); then
    python-info
  fi

  prompt_sauron_async_tasks
}

function prompt_sauron_setup {
  # When we return, restore ZSH options to what they were before
  setopt local_options

  # Don't print commands or use ksh arrays
  unsetopt xtrace ksh_arrays

  prompt_opts=(
    cr      # Print a carriage return just before printing a prompt
    percent # % is treated specially in prompt expansion
    sp      # Attempt to preserve a partial line (a line not ending in newline)
    subst   # Perform a bunch of expansions in the prompt
  )

  # Load required functions.
  # autoload behaves like functions -u, which behaves like typeset -fu
  # -f names refer to functions rather than parameters
  # -u mark the function for autoloading
  # -U suppress alias expansion when loading function
  # -z loads function zsh style
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_sauron_precmd

  # Tell prezto to manage this prompt
  zstyle ':prezto:module:prompt' managed 'yes'

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{1}‚ùØ%F{3}‚ùØ%F{2}‚ùØ%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{1}REPLACE%f '
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{2}‚ùÆ%F{3}‚ùÆ%F{1}‚ùÆ%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  # Main contexts
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{16}%s%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{5}‚ñ≤%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{5}‚ñº%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %%B%F{2}%b%f%%b'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:position' format ' %%B%F{5}%p%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}‚òÖ%f%%b'
  # Verbose contexts
  zstyle ':prezto:module:git:info:added' format ' %%B%F{2}‚úö%f%%b'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{1}‚úñ%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{4}‚óè%f%%b'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{5}‚ñ∂%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{3}‚â†%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{7}‚ñ†%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'status' '%b %p %c:%s%A%B%S%a%d%m%r%U%u '

  # Python-info parameters
  zstyle ':prezto:module:python:info:virtualenv' format '%F{6}(%v)%f '

  # Clean up prompt variables
  _sauron_cur_git_root=''
  _prompt_sauron_git=''
  _prompt_sauron_pwd=''

  # Define prompts.
  # ${SSH_TTY:+"%F{1}%n%f%F{7}@%f%F{6}%m%f "} Defines extras to add to the prompt when SSH_TTY is defined
  #   These extras are: %n@%m which expands to username@hostname
  # ${_prompt_sauron_pwd} is the pwd as set earlier in this file
  # %(!. %B%F{1}#%f%b.) displays a # when running with privileges
  # ${editor_info[keymap]} displays information about the state of the ZSH editor (e.g. vim insert vs normal mode)
  PROMPT='${SSH_TTY:+"%F{1}%n%f%F{7}@%f%F{16}%m%f "}'
  PROMPT+='%F{4}${_prompt_sauron_pwd}%(!. %B%F{1}#%f%b.)'
  PROMPT+='${editor_info[keymap]} '

  # editor_info[overwrite] is whether prompt input is in replace mode
  #
  # %(?::...) is a ternary operator based on the last command's exit code
  #   it prints nothing if it was successful, otherwise prints the last
  #   commands exit code, formatted to look more error-like
  #
  # VIM is for when the prompt is running from within vim (for example inside
  #   a neovim terminal emulator). ${VIM:+"..."} simply means if VIM is not
  #   null then substitute "..."
  #
  # %(1j:...:) is also a ternary operator, but it's based on the number of
  #   background jobs. It will print the number of jobs if it's greater than
  #   or equal to one.
  #
  # %* prints the current 24 hour time with seconds (useful for timing
  #   commands)
  RPROMPT='%B${editor_info[overwrite]}%b' # Editor info
  RPROMPT+='$python_info[virtualenv]' # Python venv
  RPROMPT+='%(?::%B%K{1}%F{0} %? %f%k%b )' # Return code
  RPROMPT+='%(1j:%B%F{5}[%j]%f%b :)' # Job count
  RPROMPT+='${VIM:+"%B%F{6}V%f%b "}' # If prompt is in vim mode
  RPROMPT+='${_prompt_sauron_git}' # Git info
  RPROMPT+='%F{4}%*%f' # Current time

  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function prompt_sauron_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2>/dev/null
  prompt_preview_theme 'sauron'
}

prompt_sauron_setup "$@"
